package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
	"syscall"

	"golang.org/x/term"
)

func main() {
	fmt.Println("=== –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===")
	fmt.Println("–í–µ—Ä—Å–∏—è 1.0")
	fmt.Println()

	userManager := NewUserManager()
	scanner := bufio.NewScanner(os.Stdin)

	for {
		showMainMenu()
		
		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ")
		if !scanner.Scan() {
			break
		}
		
		choice := strings.TrimSpace(scanner.Text())
		fmt.Println()

		switch choice {
		case "1":
			registerUser(userManager, scanner)
		case "2":
			authenticateUser(userManager, scanner)
		case "3":
			changeUserPassword(userManager, scanner)
		case "4":
			showUserStatus(userManager, scanner)
		case "5":
			showAllUsers(userManager)
		case "6":
			generatePasswordDemo()
		case "7":
			showPasswordRules()
		case "8":
			fmt.Println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã!")
			return
		default:
			fmt.Println(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 8.")
		}

		fmt.Println()
		fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
		scanner.Scan()
		fmt.Println()
	}
}

func showMainMenu() {
	fmt.Println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
	fmt.Println("‚îÇ              –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ               ‚îÇ")
	fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
	fmt.Println("‚îÇ 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è             ‚îÇ")
	fmt.Println("‚îÇ 2. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É                       ‚îÇ")
	fmt.Println("‚îÇ 3. –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)         ‚îÇ")
	fmt.Println("‚îÇ 4. –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è                  ‚îÇ")
	fmt.Println("‚îÇ 5. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π            ‚îÇ")
	fmt.Println("‚îÇ 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è         ‚îÇ")
	fmt.Println("‚îÇ 7. –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π             ‚îÇ")
	fmt.Println("‚îÇ 8. –í—ã—Ö–æ–¥                                ‚îÇ")
	fmt.Println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
}

func registerUser(userManager *UserManager, scanner *bufio.Scanner) {
	fmt.Println("=== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
	
	// –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
	if !scanner.Scan() {
		return
	}
	username := strings.TrimSpace(scanner.Text())

	if username == "" {
		fmt.Println(" –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
		return
	}

	// –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
	password, err := readPassword()
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	// –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	err = userManager.RegisterUser(username, password)
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n", username)
}

func authenticateUser(userManager *UserManager, scanner *bufio.Scanner) {
	fmt.Println("=== –í–•–û–î –í –°–ò–°–¢–ï–ú–£ ===")
	
	// –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
	fmt.Print("–õ–æ–≥–∏–Ω: ")
	if !scanner.Scan() {
		return
	}
	username := strings.TrimSpace(scanner.Text())

	if username == "" {
		fmt.Println(" –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
		return
	}

	// –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
	fmt.Print("–ü–∞—Ä–æ–ª—å: ")
	password, err := readPassword()
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	// –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	result, err := userManager.AuthenticateUser(username, password)
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: %v\n", err)
		return
	}

	switch result {
	case AuthSuccess:
		fmt.Printf(" –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n", username)
	case AuthUserNotFound:
		fmt.Println(" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	case AuthInvalidCredentials:
		fmt.Println(" –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
		if status, err := userManager.GetUserStatus(username); err == nil {
			fmt.Println("\n –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
			fmt.Print(status)
		}
	case AuthUserBlocked:
		fmt.Println("	–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞.")
		fmt.Println("   –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.")
	}
}

func changeUserPassword(userManager *UserManager, scanner *bufio.Scanner) {
	fmt.Println("=== –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø (–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê) ===")
	
	// –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
	fmt.Print("–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	if !scanner.Scan() {
		return
	}
	username := strings.TrimSpace(scanner.Text())

	if username == "" {
		fmt.Println(" –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
		return
	}

	// –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
	fmt.Print("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
	newPassword, err := readPassword()
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	fmt.Print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
	confirmPassword, err := readPassword()
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	if newPassword != confirmPassword {
		fmt.Println(" –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
		return
	}

	// –ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
	err = userManager.ChangePassword(username, newPassword)
	if err != nil {
		fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	fmt.Printf("–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n", username)
	fmt.Println("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
}

func showUserStatus(userManager *UserManager, scanner *bufio.Scanner) {
	fmt.Println("=== –°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
	
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	if !scanner.Scan() {
		return
	}
	username := strings.TrimSpace(scanner.Text())

	if username == "" {
		fmt.Println(" –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
		return
	}

	status, err := userManager.GetUserStatus(username)
	if err != nil {
		fmt.Printf(" %v\n", err)
		return
	}

	fmt.Println("\n –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
	fmt.Print(status)
}

func showAllUsers(userManager *UserManager) {
	fmt.Println("=== –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
	status := userManager.GetAllUsersStatus()
	fmt.Println(status)
}

func generatePasswordDemo() {
	fmt.Println("=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –ü–ê–†–û–õ–Ø ===")
	
	scanner := bufio.NewScanner(os.Stdin)
	
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–º–∏–Ω–∏–º—É–º 12, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 16): ")
	scanner.Scan()
	lengthStr := strings.TrimSpace(scanner.Text())
	
	length := 16 // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if lengthStr != "" {
		if parsedLength, err := strconv.Atoi(lengthStr); err == nil && parsedLength >= 12 {
			length = parsedLength
		} else {
			fmt.Println("  –ò—Å–ø–æ–ª—å–∑—É—é –¥–ª–∏–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (16 —Å–∏–º–≤–æ–ª–æ–≤)")
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–∞—Ä–æ–ª–µ–π
	fmt.Printf("\n –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ (–¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤):\n\n", length)
	
	for i := 1; i <= 5; i++ {
		password, err := GenerateSecurePassword(length)
		if err != nil {
			fmt.Printf(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: %v\n", err)
			return
		}
		fmt.Printf("%d. %s\n", i, password)
	}

	fmt.Println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
	fmt.Println("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
	fmt.Println("   ‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
	fmt.Println("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏")
}

func showPasswordRules() {
	fmt.Println("=== –ü–†–ê–í–ò–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–´–• –ü–ê–†–û–õ–ï–ô ===")
	
	rules := DefaultPasswordRules()
	
	fmt.Printf(" –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—è–º –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n")
	fmt.Printf("‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", rules.Length)
	if rules.RequireUppercase {
		fmt.Printf("‚Ä¢ –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z): –º–∏–Ω–∏–º—É–º %d\n", rules.MinUppercase)
	}
	if rules.RequireLowercase {
		fmt.Printf("‚Ä¢ –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z): –º–∏–Ω–∏–º—É–º %d\n", rules.MinLowercase)
	}
	if rules.RequireDigits {
		fmt.Printf("‚Ä¢ –¶–∏—Ñ—Ä—ã (0-9): –º–∏–Ω–∏–º—É–º %d\n", rules.MinDigits)
	}
	if rules.RequireSpecial {
		fmt.Printf("‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (!@#$%%^&*()_+-=[]{}|;:,.<>?): –º–∏–Ω–∏–º—É–º %d\n", rules.MinSpecial)
	}

	fmt.Println("\n –ü—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
	fmt.Println("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
	fmt.Println("   ‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
	fmt.Println("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤")
	fmt.Println("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏")
	fmt.Println("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è")

	fmt.Println("\n –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π:")
	for i := 1; i <= 3; i++ {
		if password, err := GenerateSecurePassword(12); err == nil {
			fmt.Printf("   %d. %s\n", i, password)
		}
	}
}

// readPassword –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ—Ç –ø–∞—Ä–æ–ª—å –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
func readPassword() (string, error) {
	fd := int(syscall.Stdin)
	if !term.IsTerminal(fd) {
		scanner := bufio.NewScanner(os.Stdin)
		if scanner.Scan() {
			return scanner.Text(), nil
		}
		return "", scanner.Err()
	}

	bytePassword, err := term.ReadPassword(fd)
	if err != nil {
		return "", err
	}
	fmt.Println() 

	return string(bytePassword), nil
}