package main

import (
	"fmt"
	"math"
	"strings"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
type PasswordTask struct {
	Variant     int     // –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
	Probability float64 // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è (P)
	Speed       float64 // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–±–æ—Ä–∞ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ (V)
	SpeedUnit   string  // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
	Time        float64 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è (T)
	TimeUnit    string  // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á—ë—Ç–∞
type PasswordAnalysis struct {
	Task           PasswordTask
	SpeedPerMinute float64 // –°–∫–æ—Ä–æ—Å—Ç—å –≤ –ø–∞—Ä–æ–ª—è—Ö/–º–∏–Ω—É—Ç—É
	TimeInMinutes  float64 // –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
	LowerBound     float64 // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ S*
	Combinations   []AlphabetCombination
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –¥–ª–∏–Ω—ã
type AlphabetCombination struct {
	AlphabetSize    int     // –ú–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞ A
	AlphabetName    string  // –û–ø–∏—Å–∞–Ω–∏–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞
	MinLength       int     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ L
	TotalPasswords  float64 // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π S = A^L
	SecurityMargin  float64 // –ó–∞–ø–∞—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∞–ª—Ñ–∞–≤–∏—Ç—ã
var alphabets = []struct {
	Size int
	Name string
}{
	{26, "–¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (a-z)"},
	{52, "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z, a-z)"},
	{62, "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã (A-Z, a-z, 0-9)"},
	{95, "–ü–æ–ª–Ω—ã–π ASCII –Ω–∞–±–æ—Ä (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)"},
	{36, "–°—Ç—Ä–æ—á–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã (a-z, 0-9)"},
	{10, "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (0-9)"},
}

// –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏–π
var variants = []PasswordTask{
	{1, 1e-4, 15, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 2, "–Ω–µ–¥–µ–ª–∏"},
	{2, 1e-5, 3, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 10, "–¥–Ω–µ–π"},
	{3, 1e-6, 10, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 5, "–¥–Ω–µ–π"},
	{4, 1e-7, 11, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 6, "–¥–Ω–µ–π"},
	{5, 1e-4, 100, "–ø–∞—Ä–æ–ª–µ–π/–¥–µ–Ω—å", 12, "–¥–Ω–µ–π"},
	{6, 1e-5, 10, "–ø–∞—Ä–æ–ª–µ–π/–¥–µ–Ω—å", 1, "–º–µ—Å—è—Ü"},
	{7, 1e-6, 20, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 3, "–Ω–µ–¥–µ–ª–∏"},
	{8, 1e-7, 15, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 20, "–¥–Ω–µ–π"},
	{9, 1e-4, 3, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 15, "–¥–Ω–µ–π"},
	{10, 1e-5, 10, "–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω", 1, "–Ω–µ–¥–µ–ª—è"},
	// ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
}

func main() {
	fmt.Println("=== –ö–û–õ–ò–ß–ï–°–¢–í–ï–ù–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–¢–û–ô–ö–û–°–¢–ò –ü–ê–†–û–õ–ï–ô ===")
	fmt.Println()

	// –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
	var variantNum int
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1-30): ")
	fmt.Scanf("%d", &variantNum)

	if variantNum < 1 || variantNum > len(variants) {
		fmt.Printf("‚ùå –í–∞—Ä–∏–∞–Ω—Ç %d –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ\n", variantNum)
		fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
		for _, v := range variants {
			fmt.Printf("–í–∞—Ä–∏–∞–Ω—Ç %d: P=%.0e, V=%.0f %s, T=%.0f %s\n", 
				v.Variant, v.Probability, v.Speed, v.SpeedUnit, v.Time, v.TimeUnit)
		}
		return
	}

	task := variants[variantNum-1]
	fmt.Printf("\nüìã –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç %d:\n", task.Variant)
	fmt.Printf("   P = %.0e (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞)\n", task.Probability)
	fmt.Printf("   V = %.0f %s (—Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–±–æ—Ä–∞)\n", task.Speed, task.SpeedUnit)
	fmt.Printf("   T = %.0f %s (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è)\n", task.Time, task.TimeUnit)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
	analysis := analyzePasswordSecurity(task)
	
	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	printResults(analysis)

	fmt.Println("\n=== –ì–ï–ù–ï–†–ê–¢–û–† –ü–ê–†–û–õ–ï–ô ===")
	generatePasswordExample(analysis)
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
func analyzePasswordSecurity(task PasswordTask) PasswordAnalysis {
	analysis := PasswordAnalysis{Task: task}
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –ø–∞—Ä–æ–ª–∏/–º–∏–Ω—É—Ç—É
	analysis.SpeedPerMinute = convertToPerMinute(task.Speed, task.SpeedUnit)
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã
	analysis.TimeInMinutes = convertToMinutes(task.Time, task.TimeUnit)
	
	// –í—ã—á–∏—Å–ª—è–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É S*
	analysis.LowerBound = math.Ceil((analysis.SpeedPerMinute * analysis.TimeInMinutes) / task.Probability)
	
	// –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –¥–ª–∏–Ω—ã
	analysis.Combinations = findAlphabetCombinations(analysis.LowerBound)
	
	return analysis
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –ø–∞—Ä–æ–ª–∏/–º–∏–Ω—É—Ç—É
func convertToPerMinute(speed float64, unit string) float64 {
	switch {
	case strings.Contains(unit, "–º–∏–Ω"):
		return speed
	case strings.Contains(unit, "–¥–µ–Ω—å"):
		return speed / (24 * 60) // –ø–∞—Ä–æ–ª–µ–π –≤ –¥–µ–Ω—å -> –ø–∞—Ä–æ–ª–µ–π –≤ –º–∏–Ω—É—Ç—É
	case strings.Contains(unit, "—á–∞—Å"):
		return speed / 60 // –ø–∞—Ä–æ–ª–µ–π –≤ —á–∞—Å -> –ø–∞—Ä–æ–ª–µ–π –≤ –º–∏–Ω—É—Ç—É
	default:
		return speed // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–∂–µ –≤ –º–∏–Ω—É—Ç–∞—Ö
	}
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
func convertToMinutes(time float64, unit string) float64 {
	switch {
	case strings.Contains(unit, "–º–∏–Ω"):
		return time
	case strings.Contains(unit, "—á–∞—Å"):
		return time * 60
	case strings.Contains(unit, "–¥–µ–Ω—å") || strings.Contains(unit, "–¥–Ω"):
		return time * 24 * 60
	case strings.Contains(unit, "–Ω–µ–¥–µ–ª—è") || strings.Contains(unit, "–Ω–µ–¥"):
		return time * 7 * 24 * 60
	case strings.Contains(unit, "–º–µ—Å—è—Ü"):
		return time * 30 * 24 * 60 // –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π
	default:
		return time
	}
}

// –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –¥–ª–∏–Ω—ã
func findAlphabetCombinations(lowerBound float64) []AlphabetCombination {
	var combinations []AlphabetCombination
	
	for _, alphabet := range alphabets {
		// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
		minLength := int(math.Ceil(math.Log(lowerBound) / math.Log(float64(alphabet.Size))))
		
		if minLength > 0 && minLength <= 20 { // —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É
			totalPasswords := math.Pow(float64(alphabet.Size), float64(minLength))
			securityMargin := totalPasswords / lowerBound
			
			combination := AlphabetCombination{
				AlphabetSize:   alphabet.Size,
				AlphabetName:   alphabet.Name,
				MinLength:      minLength,
				TotalPasswords: totalPasswords,
				SecurityMargin: securityMargin,
			}
			
			combinations = append(combinations, combination)
		}
	}
	
	return combinations
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
func printResults(analysis PasswordAnalysis) {
	fmt.Println("\n –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
	fmt.Printf("   –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–±–æ—Ä–∞: %.2f –ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω\n", analysis.SpeedPerMinute)
	fmt.Printf("   –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: %.0f –º–∏–Ω—É—Ç (%.2f –¥–Ω–µ–π)\n", 
		analysis.TimeInMinutes, analysis.TimeInMinutes/(24*60))
	
	fmt.Printf("\n –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ S*: %.2e\n", analysis.LowerBound)
	fmt.Printf("   (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π)\n")
	
	fmt.Println("\n –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ü–ê–†–û–õ–ï–ô:")
	fmt.Println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
	fmt.Println("‚îÇ  A  ‚îÇ               –ê–ª—Ñ–∞–≤–∏—Ç                    ‚îÇ   L    ‚îÇ   –í—Å–µ–≥–æ     ‚îÇ   –ó–∞–ø–∞—Å     ‚îÇ")
	fmt.Println("‚îÇ     ‚îÇ                                          ‚îÇ        ‚îÇ  –ø–∞—Ä–æ–ª–µ–π    ‚îÇ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏‚îÇ")
	fmt.Println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
	
	for _, combo := range analysis.Combinations {
		fmt.Printf("‚îÇ %3d ‚îÇ %-40s ‚îÇ %6d ‚îÇ %11.2e ‚îÇ %11.2f ‚îÇ\n",
			combo.AlphabetSize,
			combo.AlphabetName,
			combo.MinLength,
			combo.TotalPasswords,
			combo.SecurityMargin)
	}
	fmt.Println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
	
	if len(analysis.Combinations) > 0 {
		best := analysis.Combinations[0]
		for _, combo := range analysis.Combinations {
			if combo.MinLength < best.MinLength {
				best = combo
			}
		}
		
		fmt.Printf("\n –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –í–´–ë–û–†:\n")
		fmt.Printf("   –ê–ª—Ñ–∞–≤–∏—Ç: %s (A = %d)\n", best.AlphabetName, best.AlphabetSize)
		fmt.Printf("   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: %d —Å–∏–º–≤–æ–ª–æ–≤\n", best.MinLength)
		fmt.Printf("   –ó–∞–ø–∞—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: %.2f —Ä–∞–∑\n", best.SecurityMargin)
	}
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
func generatePasswordExample(analysis PasswordAnalysis) {
	if len(analysis.Combinations) == 0 {
		fmt.Println(" –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
		return
	}
	
	// –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
	best := analysis.Combinations[0]
	for _, combo := range analysis.Combinations {
		if combo.AlphabetSize == 62 { // –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã
			best = combo
			break
		}
	}
	
	fmt.Printf(" –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è (A=%d, L=%d):\n", 
		best.AlphabetSize, best.MinLength)
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π
	for i := 1; i <= 5; i++ {
		password := generateSecurePassword(best.AlphabetSize, best.MinLength)
		fmt.Printf("   %d. %s\n", i, password)
	}
	
	fmt.Println("\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
	fmt.Println("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π")
	fmt.Println("   ‚Ä¢ –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ")
	fmt.Println("   ‚Ä¢ –ú–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º")
	fmt.Printf("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: %.0f %s\n", 
		analysis.Task.Time, analysis.Task.TimeUnit)
}

// –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
func generateSecurePassword(alphabetSize, length int) string {
	var charset string
	
	switch alphabetSize {
	case 10:
		charset = "0123456789"
	case 26:
		charset = "abcdefghijklmnopqrstuvwxyz"
	case 36:
		charset = "abcdefghijklmnopqrstuvwxyz0123456789"
	case 52:
		charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	case 62:
		charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
	case 95:
		charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
	default:
		charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
	}
	
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
	password := make([]byte, length)
	for i := 0; i < length; i++ {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
		// –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å crypto/rand
		idx := (i*17 + 42) % len(charset)
		password[i] = charset[idx]
	}
	
	return string(password)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func customCalculation() {
	fmt.Println("\n=== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ê–°–ß–Å–¢ ===")
	
	var P, V, T float64
	var speedUnit, timeUnit string
	
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞ P (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1e-6): ")
	fmt.Scanf("%f", &P)
	
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–±–æ—Ä–∞ V: ")
	fmt.Scanf("%f", &V)
	
	fmt.Print("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (–ø–∞—Ä–æ–ª–µ–π/–º–∏–Ω, –ø–∞—Ä–æ–ª–µ–π/–¥–µ–Ω—å): ")
	fmt.Scanf("%s", &speedUnit)
	
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è T: ")
	fmt.Scanf("%f", &T)
	
	fmt.Print("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–¥–Ω–µ–π, –Ω–µ–¥–µ–ª—å, –º–µ—Å—è—Ü): ")
	fmt.Scanf("%s", &timeUnit)
	
	task := PasswordTask{
		Variant:     0,
		Probability: P,
		Speed:       V,
		SpeedUnit:   speedUnit,
		Time:        T,
		TimeUnit:    timeUnit,
	}
	
	analysis := analyzePasswordSecurity(task)
	printResults(analysis)
}